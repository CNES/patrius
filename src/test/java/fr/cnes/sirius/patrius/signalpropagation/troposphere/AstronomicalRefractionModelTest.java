/**
 *
 * Copyright 2011-2022 CNES
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.cnes.sirius.patrius.signalpropagation.troposphere;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import fr.cnes.sirius.patrius.bodies.EllipsoidPoint;
import fr.cnes.sirius.patrius.bodies.OneAxisEllipsoid;
import fr.cnes.sirius.patrius.frames.FramesFactory;
import fr.cnes.sirius.patrius.math.parameter.Parameter;
import fr.cnes.sirius.patrius.math.util.MathLib;
import fr.cnes.sirius.patrius.math.util.Pair;
import fr.cnes.sirius.patrius.signalpropagation.ConstantMeteorologicalConditionsProvider;
import fr.cnes.sirius.patrius.signalpropagation.MeteorologicalConditions;
import fr.cnes.sirius.patrius.signalpropagation.MeteorologicalConditionsProvider;
import fr.cnes.sirius.patrius.time.AbsoluteDate;
import fr.cnes.sirius.patrius.utils.Constants;
import fr.cnes.sirius.patrius.utils.StringTablePrinter;
import fr.cnes.sirius.patrius.utils.exception.PatriusException;

/**
 * This test validates the {@link AstronomicalRefractionModel astronomical refraction model} elevation corrections
 * computation against the BIBOR external library, as well as unit testing for coverage purposes.
 *
 * <p>
 * Note: The Bibor version was the 6.1. But some code was modified to correct some errors in Bibor to generate these
 * references.
 * </p>
 *
 * @author amouroum, bonitt
 * 
 * @since 4.13
 */
public class AstronomicalRefractionModelTest {

    /** Features description. */
    public enum features {
        /**
         * @featureTitle Astronomical refraction model
         * 
         * @featureDescription implementation of the atmospheric corrections correction models
         *                     to correct the elevation and distance of a propagated signal.
         * 
         * @coveredRequirements DV-MES_FILT_470
         * 
         */
        ASTRONOMICAL_REFRACTION_MODEL
    }

    /** Validity threshold used for absolute comparisons [rad]. */
    private static final double validityThreshold = 4e-11;

    /** Reference apparent elevation corrections generated by BIBOR at a finite distance of 800km. */
    private static final double[] refApparentFinite =
        new double[] { 0.007283045409263833, 0.006851137206774771, 0.006464474210933435, 0.0061156824880126415,
            0.005799266752772647,
            0.005518187140657105, 0.005260518246697599, 0.005023516962674002, 0.004805117630303668,
            0.004601659285456305,
            0.004405383191832479, 0.004221420948268051, 0.004049794612963398, 0.0038894934996662744,
            0.0037395190492020003,
            0.003601939498540485, 0.0034726100976811836, 0.0033509570881233852, 0.0032364935675612827,
            0.0031284293767188665,
            0.003028422027483435, 0.002933710814866153, 0.0028440545906462944, 0.002759109571190743,
            0.0026782565979153183,
            0.0026019027789778715, 0.002529080263575567, 0.002459679676985127, 0.002393638325238756,
            0.002330411171453939,
            0.0022711691146344304, 0.002214396882161296, 0.0021601124013383988, 0.0021080590165580837,
            0.002058136616919004,
            0.002010904790842094, 0.001965588977255628, 0.0019220437869427176, 0.0018800931943188104,
            0.0018397480715233172,
            0.0018014119801665895, 0.0017644602514452767, 0.0017288212504185108, 0.001694427663071707,
            0.0016611726560398221,
            0.0016295349721555663, 0.0015988692367610025, 0.001569206293102532, 0.0015404602997943773,
            0.0015126643872431789,
            0.0014861350221282432, 0.00146029553953686, 0.0014351573286324193, 0.0014108105104824187,
            0.001387095812126704,
            0.0013644200863871525, 0.001342381479388921, 0.0013209373429534654, 0.0013000146324058104,
            0.0012797118282852349,
            0.0012601353408943083, 0.0012411340627180856, 0.0012225524261779697, 0.001204465141005695,
            0.0011868214125090315,
            0.001169813350259341, 0.0011532025514848776, 0.0011369423238061227, 0.0011211140319717927,
            0.0011056464033560864,
            0.0010907529034958063, 0.001076130324378255, 0.0010618513183109357, 0.0010478523794230643,
            0.00103418092871288,
            0.0010210016510820985, 0.0010080420465066187, 9.953573975405305E-4, 9.829359838682272E-4,
            9.707549406248184E-4,
            9.589686978124234E-4, 9.474065303363144E-4, 9.360915098495237E-4, 9.249414461547367E-4,
            9.141012290789785E-4,
            9.03455631729333E-4, 8.930919551037864E-4, 8.828563568634706E-4, 8.728673793729769E-4,
            8.630493623897895E-4,
            8.535051982123676E-4, 8.440994185121564E-4, 8.348610141368784E-4, 8.257712392298888E-4,
            8.168609456724596E-4,
            8.081973870912584E-4, 7.996671800269972E-4, 7.912550659074924E-4, 7.830016026748599E-4,
            7.748567731411526E-4,
            7.665967711738553E-4, 7.588157491646985E-4, 7.511698824538282E-4, 7.436555564008795E-4,
            7.362692815153782E-4,
            7.290076882053853E-4, 7.218675217788295E-4, 7.148456376837586E-4, 7.079389969812944E-4,
            7.011446620315276E-4,
            6.944597923834728E-4, 6.878816408601995E-4, 6.814075498273731E-4, 6.75034947633435E-4, 6.68761345217872E-4,
            6.625843328711412E-4, 6.565015771475835E-4, 6.505108179144514E-4, 6.44609865536605E-4, 6.3879659818733E-4,
            6.330689592772831E-4,
            6.27424955000011E-4, 6.218626519840509E-4, 6.163801750485032E-4, 6.109757050549725E-4,
            6.056504890370462E-4,
            6.003997560952712E-4, 5.952218441422907E-4, 5.901151394025472E-4, 5.850780746889939E-4,
            5.801091277486403E-4,
            5.75206819680929E-4, 5.70369713418728E-4, 5.655964122726065E-4, 5.608855585346184E-4, 5.562358321409278E-4,
            5.51645949384838E-4,
            5.471146616844447E-4, 5.426407543989153E-4, 5.382230456902892E-4, 5.338603854327939E-4,
            5.295516541630185E-4,
            5.252957620716092E-4, 5.210916480342664E-4, 5.169382786793797E-4, 5.128346474931877E-4,
            5.087797739564692E-4,
            5.047727027165383E-4, 5.008125027883281E-4, 4.968982667870048E-4, 4.930297441232412E-4,
            4.892054254737044E-4,
            4.8542447017418944E-4, 4.8168605835674505E-4, 4.779893903119614E-4, 4.743336858761271E-4,
            4.707181838394803E-4,
            4.6714214137599797E-4, 4.6360483349383586E-4, 4.601055525037534E-4, 4.566436075090774E-4,
            4.532183239100984E-4,
            4.498290429280072E-4, 4.464751211452622E-4, 4.431559300606125E-4, 4.3987085565988515E-4,
            4.366192980019834E-4,
            4.33400670818207E-4, 4.3021440112522846E-4, 4.2705992885117006E-4, 4.239367064742261E-4,
            4.208441986730538E-4,
            4.1778188198871025E-4, 4.1474924449791395E-4, 4.117457854967421E-4, 4.0877134173067375E-4,
            4.058251027938553E-4,
            4.0290659991060185E-4, 4.000153743570767E-4, 3.971509771931725E-4, 3.943129690024971E-4,
            3.9150091964046396E-4,
            3.887144079902649E-4, 3.85953021726948E-4, 3.832163570883784E-4, 3.805040186529718E-4,
            3.7781561912542116E-4,
            3.7515077912708694E-4, 3.725091269948244E-4, 3.6989029858458533E-4, 3.672939370812367E-4,
            3.647196928143748E-4,
            3.6216722307902405E-4, 3.596361919626645E-4, 3.5712627017581156E-4, 3.5463713488992354E-4,
            3.521684695770855E-4,
            3.497199638570203E-4, 3.4729131334709784E-4, 3.4488221951689546E-4, 3.4249263716734646E-4,
            3.401220282922557E-4,
            3.3777011112090527E-4, 3.354366091933292E-4, 3.3312125123485803E-4, 3.3082377103321736E-4,
            3.2854390732084404E-4,
            3.262814036580908E-4, 3.2403600832198176E-4, 3.2180747419641165E-4, 3.195955586660082E-4,
            3.1740002351332564E-4,
            3.1522063481725926E-4, 3.1305716285656704E-4, 3.1090938201383533E-4, 3.087770706833304E-4,
            3.066600111804041E-4,
            3.045579896544526E-4, 3.024707960029849E-4, 3.003982237888003E-4, 2.983400701586092E-4,
            2.96296135764873E-4,
            2.94266224688422E-4, 2.9225014436362606E-4, 2.902477055064523E-4, 2.882588948509568E-4,
            2.862833542892629E-4,
            2.8432090398400334E-4, 2.8237136710562716E-4, 2.804345697674515E-4, 2.7851034096337823E-4,
            2.765985125076087E-4,
            2.746989189746918E-4, 2.728113976416813E-4, 2.709357884321806E-4, 2.6907193386094264E-4,
            2.6721967897991306E-4,
            2.653788713268268E-4, 2.6354936087269465E-4, 2.6173099997339744E-4, 2.599236433198371E-4,
            2.581271478913072E-4,
            2.563413729083086E-4, 2.5456617978825147E-4, 2.528014321004912E-4, 2.51046995523585E-4,
            2.493027378032142E-4,
            2.4756852871055113E-4, 2.4584424000317906E-4, 2.441297453844582E-4, 2.424252561585849E-4,
            2.4073031033933212E-4,
            2.390447872574475E-4, 2.3736856804190687E-4, 2.3570153558516438E-4, 2.3404357450818036E-4,
            2.3239457112844697E-4,
            2.3075441342601533E-4, 2.2912299101252032E-4, 2.2750019509998332E-4, 2.2588591846961492E-4,
            2.2428005544339324E-4,
            2.226825018531997E-4, 2.2109315501406268E-4, 2.1951191369518064E-4, 2.1793867809294376E-4,
            2.1637334980473266E-4,
            2.14815831802051E-4, 2.132660284058785E-4, 2.1172384526102483E-4, 2.101891893121488E-4,
            2.0866196877955545E-4,
            2.071420931359924E-4, 2.0562947308377932E-4, 2.041240205322703E-4, 2.0262564857609355E-4,
            2.0113427147350205E-4,
            1.9964980462516824E-4, 1.9817216455408904E-4, 1.9670126888526873E-4, 1.952370363254019E-4,
            1.9377938664444372E-4,
            1.92328240655959E-4, 1.9088352019891452E-4, 1.8944514811913837E-4, 1.880130482521114E-4,
            1.8658714540487065E-4,
            1.8516736533946698E-4, 1.8375363475564566E-4, 1.823458812749701E-4, 1.8094403342416854E-4,
            1.79548020619702E-4,
            1.7815777315244308E-4, 1.7677322217202196E-4, 1.753942996723934E-4, 1.7402093847695976E-4,
            1.7265307222447124E-4,
            1.7129063535492595E-4, 1.6993356309558116E-4, 1.6858179144829677E-4, 1.672350261271438E-4,
            1.6589343850947902E-4,
            1.6455696684869459E-4, 1.632255501211599E-4, 1.6189912801289896E-4, 1.6057764090848803E-4,
            1.5926102987867674E-4,
            1.5794923666928584E-4, 1.5664220368966086E-4, 1.553398740010703E-4, 1.5404219130649155E-4,
            1.5274909993923114E-4,
            1.5146054485282168E-4, 1.5017647161036374E-4, 1.4889682637447832E-4, 1.476215558970928E-4,
            1.463506075101706E-4,
            1.450839291152195E-4, 1.4382146917468752E-4, 1.4256317670208185E-4, 1.4130900125303159E-4,
            1.400588929162394E-4,
            1.3881280230476634E-4, 1.3757068054726096E-4, 1.3633247927946623E-4, 1.350981506358373E-4,
            1.3386764724138134E-4,
            1.3264092220344192E-4, 1.3141792910376093E-4, 1.301986219908735E-4, 1.2898295537205895E-4,
            1.2777088420606875E-4,
            1.2656236389557707E-4, 1.2535735028007533E-4, 1.2415579962810064E-4, 1.229576686309075E-4,
            1.2176291439508491E-4,
            1.2057149443578385E-4, 1.1938336666994509E-4, 1.1819848940980426E-4, 1.170168213562861E-4,
            1.1583832159262064E-4,
            1.146629495779039E-4, 1.1349066514126926E-4, 1.1232142847517057E-4, 1.1115520012994207E-4,
            1.0999194100752563E-4,
            1.088316123556976E-4, 1.076741757625177E-4, 1.0651959315033377E-4, 1.053679249752304E-4,
            1.0421903367396901E-4,
            1.0307288213701193E-4, 1.0192943356757134E-4, 1.0078865147622462E-4, 9.965049967619599E-5,
            9.851494227736124E-5,
            9.738194368219544E-5, 9.625146858033284E-5, 9.512348194362641E-5, 9.399794902148484E-5,
            9.287483533632068E-5,
            9.175410667855433E-5, 9.063572910211759E-5, 8.951966891990182E-5, 8.8405892699428E-5, 8.729436725823936E-5,
            8.618505965951595E-5, 8.507793720802237E-5, 8.397296744561134E-5, 8.287011814722689E-5,
            8.176935731646351E-5,
            8.067065318195787E-5, 7.957397419289247E-5, 7.847928901538737E-5, 7.738656652822584E-5,
            7.629577581941271E-5,
            7.520688618195548E-5, 7.411986711025609E-5, 7.303468829633619E-5, 7.195131962625667E-5,
            7.086973117625961E-5,
            6.978989320940987E-5, 6.871177617179258E-5, 6.763535068926574E-5, 6.656058756374095E-5,
            6.548745776985276E-5,
            6.441593245157251E-5, 6.334598291879434E-5, 6.227758064408784E-5, 6.121069725931183E-5,
            6.014530455242251E-5,
            5.908137446428152E-5, 5.801887908538084E-5, 5.695779065278961E-5, 5.5898081546906786E-5,
            5.4839724288546776E-5,
            5.378269153574755E-5, 5.272695608074529E-5, 5.167249084703229E-5, 5.061926888635937E-5,
            4.956726337584927E-5,
            4.85164476149158E-5, 4.746679502257156E-5, 4.641827913443031E-5, 4.5370873599931416E-5,
            4.43245521794533E-5,
            4.3279288741676636E-5, 4.223505726053123E-5, 4.1191831812809054E-5, 4.014958657519441E-5,
            3.910829582151609E-5,
            3.806793392030494E-5, 3.7028475331934985E-5, 3.5989894606028305E-5, 3.495216637884602E-5,
            3.3915265370693115E-5,
            3.287916638322619E-5, 3.184384429706644E-5, 3.080927406905187E-5, 2.9775430729822583E-5,
            2.8742289381197828E-5,
            2.770982519378906E-5, 2.6678013404377032E-5, 2.564682931351092E-5, 2.461624828296871E-5,
            2.3586245733370204E-5,
            2.2556797141706775E-5, 2.1527878038898884E-5, 2.0499464007339707E-5, 1.9471530678549787E-5,
            1.8444053730748422E-5,
            1.7417008886425056E-5, 1.6390371910000867E-5, 1.536411860543485E-5, 1.4338224813864597E-5,
            1.3312666411233187E-5,
            1.2287419305950786E-5, 1.1262459436535421E-5, 1.0237762769281511E-5, 9.213305295928398E-6,
            8.189063031315003E-6,
            7.16501201107958E-6, 6.141128289321313E-6, 5.117387936293127E-6, 4.093767036071963E-6,
            3.070241684277608E-6,
            2.046787985736029E-6 };

    /** Reference apparent elevation corrections generated by BIBOR at an infinite distance. */
    private static final double[] refApparentInfinite =
        new double[] { 0.009912656599650127, 0.009161800116695096, 0.008506199472233744, 0.007928629430181022,
            0.007416142382906887,
            0.006965486740537319, 0.006560320004965758, 0.006194406461394353, 0.005862807399548364,
            0.005559809460006004,
            0.005277188872278682, 0.005017271575098903, 0.004778448112556344, 0.004558519526027371,
            0.004355488748909009,
            0.004169778185310724, 0.0039973535816562045, 0.0038370156010192336, 0.003687716907936567,
            0.0035482841782643604,
            0.0034192274671984713, 0.0032982100520384527, 0.0031846538552413595, 0.0030779356416092973,
            0.002977328913359889,
            0.0028827971374010275, 0.002793381305765008, 0.002708826574716827, 0.0026288650873032005,
            0.002552925280938423,
            0.0024815371508706274, 0.002413604112310619, 0.002349010039596866, 0.0022874744447940465,
            0.002228784951289864,
            0.0021731486882963225, 0.002120005928967883, 0.002069199937863919, 0.002020549903426705,
            0.001973956436353008,
            0.0019295539169583709, 0.0018869402323555828, 0.0018460248642762078, 0.001806712420217238,
            0.0017688833301019447,
            0.001732710334236165, 0.001697834693831446, 0.0016642295737030466, 0.0016318128337282634,
            0.0016005496127604601,
            0.0015705476585883282, 0.0015415098758064794, 0.0015134079628531527, 0.0014862466221732262,
            0.0014599310328136106,
            0.0014346070802508937, 0.0014100724865393488, 0.0013862853394175367, 0.001363193910019378,
            0.0013408134238368508,
            0.0013191742113447535, 0.001298184864885199, 0.0012777685369202985, 0.0012579349723189637,
            0.0012386484780617657,
            0.0012199675990736125, 0.001201784235779213, 0.0011840676341332568, 0.0011668324738742797,
            0.0011500406385986928,
            0.0011337566216493844, 0.001117859789398823, 0.0011023636074600773, 0.0010872361184064427,
            0.0010724828096448924,
            0.0010581506653415396, 0.001044137247945276, 0.0010304517364825294, 0.0010170818290557992,
            0.0010040121566827764,
            9.91286449466111E-4, 9.788398861674263E-4, 9.666724490633438E-4, 9.547522110633366E-4,
            9.431165878228676E-4,
            9.317261786478959E-4, 9.205988471605586E-4, 9.096830358790164E-4, 8.990081839499453E-4,
            8.885466664043662E-4,
            8.783248567028057E-4, 8.682966654538493E-4, 8.584657638897042E-4, 8.488223254374816E-4,
            8.393706350340313E-4,
            8.301261388108383E-4, 8.210518419500268E-4, 8.121397619049731E-4, 8.033972535743672E-4,
            7.948071325951656E-4,
            7.86308776013156E-4, 7.780551198020014E-4, 7.699504859366435E-4, 7.619907323812569E-4,
            7.541718671433273E-4, 7.4649004162608E-4,
            7.389415443233016E-4, 7.315227948394565E-4, 7.242303382162252E-4, 7.170608395477007E-4,
            7.10011078865147E-4,
            7.03077946278885E-4, 6.962584373619851E-4, 6.895496487600017E-4, 6.829487740169782E-4,
            6.764530996028473E-4,
            6.700600011342317E-4, 6.63766939774435E-4, 6.57571458805295E-4, 6.514711803620177E-4, 6.454638023178916E-4,
            6.395470953179938E-4, 6.33718899946567E-4, 6.279771240265131E-4, 6.223197400405667E-4,
            6.167473846039329E-4,
            6.112555039956558E-4, 6.058422513406381E-4, 6.005058351881143E-4, 5.952445174615129E-4,
            5.900566114958039E-4,
            5.849404801625546E-4, 5.798945340746986E-4, 5.749172298670224E-4, 5.700070685519254E-4,
            5.65162593943791E-4,
            5.603823911493055E-4, 5.556650851199496E-4, 5.510093392675497E-4, 5.464138541326768E-4,
            5.418773661107767E-4,
            5.373986462284819E-4, 5.329764989703278E-4, 5.286097611509888E-4, 5.242973008343643E-4,
            5.200380162944107E-4,
            5.158308350168284E-4, 5.116747127407173E-4, 5.075686325362039E-4, 5.03511603919371E-4,
            4.995035908936796E-4,
            4.955427097221854E-4, 4.916280445310672E-4, 4.8775870266704047E-4, 4.839338139677185E-4,
            4.801525300577314E-4,
            4.7641402367326613E-4, 4.727174880096996E-4, 4.690621360934344E-4, 4.6544720017727137E-4,
            4.618719311577646E-4,
            4.583355980116721E-4, 4.548374872552774E-4, 4.5137690242069706E-4, 4.479531635523948E-4,
            4.4456560672001544E-4,
            4.412135835490938E-4, 4.378964607679725E-4, 4.346136197701522E-4, 4.313644561918517E-4,
            4.2814837950400086E-4,
            4.249648126181116E-4, 4.2181319150547125E-4, 4.1869296482888174E-4, 4.156035935873881E-4,
            4.1254488077102636E-4,
            4.0951597618754665E-4, 4.06516375896504E-4, 4.035455869829674E-4, 4.0060312725676006E-4,
            3.976885249616924E-4,
            3.94801318493454E-4, 3.919410561269432E-4, 3.891072957528108E-4, 3.8629960462133184E-4,
            3.8351755909515894E-4,
            3.8076074440973606E-4, 3.780287544404848E-4, 3.753211914783172E-4, 3.726376660114772E-4,
            3.699777965138207E-4,
            3.673412092404238E-4, 3.647275380286308E-4, 3.6213642410554137E-4, 3.595675159010492E-4,
            3.570204688670975E-4,
            3.544949453012647E-4, 3.519906141766782E-4, 3.4950715097614715E-4, 3.470442375318461E-4,
            3.446017755094344E-4,
            3.421792423328185E-4, 3.397763380009744E-4, 3.373927682640554E-4, 3.350282444851693E-4,
            3.3268248350537544E-4,
            3.303552075132332E-4, 3.280461439175708E-4, 3.2575502522369515E-4, 3.234815889135989E-4,
            3.2122557732927604E-4,
            3.18986737559257E-4, 3.167648213278085E-4, 3.1455958488846303E-4, 3.12370788919214E-4,
            3.101981984209301E-4,
            3.080415826188787E-4, 3.0590071486669146E-4, 3.0377537255288356E-4, 3.0166533700970444E-4,
            2.9957039342465297E-4,
            2.974903307547683E-4, 2.954249416420307E-4, 2.9337402233220455E-4, 2.9133737259523507E-4,
            2.8931496923145783E-4,
            2.8730644283492257E-4, 2.8531160331546346E-4, 2.8333026380911175E-4, 2.813622406074856E-4,
            2.794073530902885E-4,
            2.7746542365914006E-4, 2.755362776727388E-4, 2.7361974338413475E-4, 2.71715651879445E-4,
            2.698238370179018E-4,
            2.6794413537356565E-4, 2.6607638617881513E-4, 2.642204312681695E-4, 2.6237611502499814E-4,
            2.605432843282296E-4,
            2.5872178850105954E-4, 2.569114792607685E-4, 2.5511221066953915E-4, 2.5332383908693856E-4,
            2.515462231228449E-4,
            2.4977922359237237E-4, 2.48022703470796E-4, 2.4627652785091936E-4, 2.445405638996645E-4,
            2.4281485321508978E-4,
            2.4109909215674907E-4, 2.39393153892542E-4, 2.3769691350461475E-4, 2.360102479520565E-4,
            2.34333036033596E-4,
            2.3266515835262958E-4, 2.3100649728113876E-4, 2.2935693692560655E-4, 2.2771636309404375E-4,
            2.260846632622382E-4,
            2.244617265426685E-4, 2.2284744365230758E-4, 2.212417068828687E-4, 2.196444100700523E-4,
            2.1805544856468018E-4,
            2.1647471920416272E-4, 2.149021202840773E-4, 2.1333755153118972E-4, 2.1178091407647592E-4,
            2.1023211042880963E-4,
            2.0869104444964925E-4, 2.0715762132750282E-4, 2.0563174755372504E-4, 2.0411333089831452E-4,
            2.0260228038648798E-4,
            2.0109850627580972E-4, 1.9960192003298793E-4, 1.981124343128915E-4, 1.9662996293612345E-4,
            1.951544208680378E-4,
            1.9368572419842245E-4, 1.9222379012073798E-4, 1.907685369126888E-4, 1.8931988391635013E-4,
            1.8787775151962727E-4,
            1.8644206113715978E-4, 1.8501273519222483E-4, 1.8358969709908468E-4, 1.8217287124489E-4,
            1.8076218297291557E-4,
            1.7935755856557378E-4, 1.7795892522820544E-4, 1.7656621107220438E-4, 1.7517934509980737E-4,
            1.7379825718855102E-4,
            1.7242287807528456E-4, 1.7105313934229205E-4, 1.6968897340163824E-4, 1.6833031348173488E-4,
            1.669770936124637E-4,
            1.6562924861174277E-4, 1.6428671407187068E-4, 1.6294942634653697E-4, 1.6161732253727745E-4,
            1.602903404809286E-4,
            1.5896841873713763E-4, 1.5765149657603894E-4, 1.5633951396615275E-4, 1.5503241156228365E-4,
            1.537301306943073E-4,
            1.5243261335540215E-4, 1.5113980219105816E-4, 1.498516404879191E-4, 1.485680721631244E-4,
            1.4728904175342894E-4,
            1.4601449440521108E-4, 1.447443758638145E-4, 1.4347863246377823E-4, 1.4221721111890018E-4,
            1.4096005931246713E-4,
            1.3970712508792893E-4, 1.3845835703923948E-4, 1.372137043020305E-4, 1.3597311654428568E-4,
            1.3473654395773638E-4,
            1.335039372488689E-4, 1.3227524763054221E-4, 1.310504268136059E-4, 1.2982942699857336E-4,
            1.286122008672952E-4,
            1.2739870157529865E-4, 1.2618888274373852E-4, 1.249826984517921E-4, 1.2378010322877664E-4,
            1.2258105204704384E-4,
            1.213855003144304E-4, 1.2019340386709709E-4, 1.1900471896225673E-4, 1.1781940227145737E-4,
            1.1663741087358792E-4,
            1.154587022479392E-4, 1.1428323426776466E-4, 1.131109651937301E-4, 1.1194185366725229E-4,
            1.1077585870439277E-4,
            1.0961293968947405E-4, 1.0845305636886238E-4, 1.0729616884519455E-4, 1.0614223757110519E-4,
            1.0499123489254858E-4,
            1.0384311014333125E-4, 1.0269782479255252E-4, 1.015553406364389E-4, 1.0041561979290403E-4,
            9.927862469616411E-5,
            9.81443180910202E-5, 9.70126630280288E-5, 9.588362285811725E-5, 9.475716122731015E-5, 9.363324207178891E-5,
            9.251182961311777E-5, 9.139288835297021E-5, 9.027638306852159E-5, 8.91622788075086E-5,
            8.805054088373288E-5,
            8.694113487234256E-5, 8.583402660505834E-5, 8.472918216589909E-5, 8.362656788674094E-5,
            8.252615034270994E-5,
            8.142789634790759E-5, 8.033177295130312E-5, 7.923774743240353E-5, 7.814578729692379E-5,
            7.705586027290101E-5,
            7.596793430658666E-5, 7.48819775583387E-5, 7.379795839868031E-5, 7.271584540446963E-5,
            7.163560735501395E-5,
            7.055721322812847E-5, 6.948063219650025E-5, 6.84058336239135E-5, 6.733278706161361E-5,
            6.626146224453233E-5,
            6.519182908784615E-5, 6.412385768328477E-5, 6.305751829574491E-5, 6.199278135968211E-5,
            6.0929617475780073E-5,
            5.986799740745341E-5, 5.880789207757253E-5, 5.7749272565021936E-5, 5.669211010150832E-5,
            5.5636376068257665E-5,
            5.458204199276784E-5, 5.3529079545644453E-5, 5.2477460537381226E-5, 5.142715691530686E-5,
            5.037814076039315E-5,
            4.9330384284285156E-5, 4.828385982610928E-5, 4.723853984961446E-5, 4.61943969400358E-5,
            4.515140380126348E-5,
            4.4109533252734145E-5, 4.306875822673861E-5, 4.2029051765285486E-5, 4.099038701746438E-5,
            3.995273723644832E-5,
            3.891607577669043E-5, 3.7880376091176116E-5, 3.684561172864753E-5, 3.581175633077249E-5,
            3.477878362945219E-5,
            3.3746667444142786E-5, 3.27153816790382E-5, 3.168490032053051E-5, 3.065519743442047E-5,
            2.962624716335016E-5,
            2.859802372409681E-5, 2.757050140504702E-5, 2.654365456353225E-5, 2.5517457623219775E-5,
            2.4491885071600827E-5,
            2.3466911457395434E-5, 2.244251138799891E-5, 2.141865952699773E-5, 2.0395330591532757E-5,
            1.9372499349912253E-5,
            1.8350140619044497E-5, 1.7328229261953654E-5, 1.6306740185288715E-5, 1.528564833686019E-5,
            1.426492870320456E-5,
            1.3244556307058508E-5, 1.2224506204978891E-5, 1.120475348485861E-5, 1.0185273263497996E-5,
            9.16604068419008E-6,
            8.147030914267689E-6, 7.128219142712999E-6, 6.109580577732393E-6, 5.091090444334784E-6,
            4.0727239819290245E-6,
            3.0544564419299897E-6, 2.036263085342105E-6 };

    /** Reference geometric elevation corrections generated by BIBOR at a finite distance of 800km. */
    private static final double[] refGeometricFinite = { 0.006513885484885851, 0.006192798290329371,
        0.005897739449606698,
        0.005626021459179009, 0.00537515454641313, 0.005142775867891247, 0.004929578678385393, 0.0047318573861721,
        0.00454291627323089,
        0.004359042356999687, 0.004186159960407387, 0.00402407284145756, 0.0038719855855344765, 0.0037302214587717764,
        0.003597955410814535,
        0.003473230030236918, 0.0033555561637628184, 0.0032445234747164875, 0.0031394451309194604,
        0.003040575641848564,
        0.0029478299408500774, 0.0028598463586249068, 0.0027763559997382448, 0.002696907697919526,
        0.0026204846271444815,
        0.002547970880214523, 0.0024792392071140146, 0.0024138070480381746, 0.0023511846626822486,
        0.002291371941811615,
        0.002234129856491851, 0.0021799398098807377, 0.002128169986122419, 0.0020784067866934652, 0.002030619376114595,
        0.001984732889785734, 0.0019408624139272135, 0.0018990066174342513, 0.0018586452287081556,
        0.0018197785216196305,
        0.0017823266639473978, 0.0017461117000741044, 0.0017117549987972769, 0.0016784531296376581,
        0.0016463056749744798,
        0.001615181947661526, 0.001585109782712868, 0.0015561708298721388, 0.0015282870378825475, 0.001501352861421168,
        0.0014751296550785664, 0.0014496536310348862, 0.0014249936005155117, 0.0014012939975662775,
        0.0013781953017124593,
        0.0013557999343054572, 0.0013340414026150604, 0.0013128980502636889, 0.0012924690594815491,
        0.0012726174804797985,
        0.0012532844472730176, 0.0012344596308888622, 0.0012160685430415707, 0.001198389467059302,
        0.0011811100943359687,
        0.001164262227110413, 0.0011477650682059082, 0.001131661023582975, 0.0011161455533992282,
        0.0011009954114074016,
        0.0010861794275554004, 0.0010716985095673426, 0.0010574969507435306, 0.0010437351790517635,
        0.0010303297943081713,
        0.0010172208452825515, 0.0010043370622871972, 9.917497292513122E-4, 9.794904652091763E-4, 9.675214177795599E-4,
        9.557962583393032E-4, 9.443091725582775E-4, 9.330571292140988E-4, 9.220323083771742E-4, 9.113439875869656E-4,
        9.007909823903759E-4,
        8.904469225550216E-4, 8.802724389072036E-4, 8.703966505478888E-4, 8.607225944430308E-4, 8.512133799194466E-4,
        8.418454568361877E-4,
        8.32653853356291E-4, 8.236366708989085E-4, 8.148608926685785E-4, 8.062325381079649E-4, 7.977245631454188E-4,
        7.893492280068859E-4,
        7.811580131862339E-4, 7.727512384145818E-4, 7.648800269648426E-4, 7.571459600732577E-4, 7.495453700092636E-4,
        7.420747156905438E-4,
        7.347305774016988E-4, 7.275096517611601E-4, 7.204087469312448E-4, 7.134247780540282E-4, 7.065547629032665E-4,
        6.997958177408226E-4,
        6.931451533667143E-4, 6.866000713523501E-4, 6.801579604485131E-4, 6.738162931569924E-4, 6.675726224614209E-4,
        6.61424578703329E-4,
        6.553698666016405E-4, 6.494062624047281E-4, 6.43531611170145E-4, 6.377438241647049E-4, 6.320408763793584E-4,
        6.264208041528718E-4,
        6.208817028987568E-4, 6.154217249316751E-4, 6.100396063215552E-4, 6.047355442602154E-4, 5.995053384255655E-4,
        5.943473496712315E-4,
        5.892599861712089E-4, 5.842417017436485E-4, 5.792909942441415E-4, 5.744064040273944E-4, 5.695865124697441E-4,
        5.64829940554068E-4,
        5.601353475097604E-4, 5.555014295099969E-4, 5.509269184189591E-4, 5.464105805905728E-4, 5.419512157147643E-4,
        5.37547655708126E-4,
        5.331987636481017E-4, 5.289034327498054E-4, 5.246605853823638E-4, 5.204691721214516E-4, 5.16328170839353E-4,
        5.122365858301059E-4,
        5.081934469661764E-4, 5.041978088879961E-4, 5.002487502243635E-4, 4.963454636826015E-4, 4.924875226399728E-4,
        4.886735205364978E-4,
        4.849026249558186E-4, 4.811740239729634E-4, 4.7748692552951333E-4, 4.73840556834082E-4, 4.702341637816687E-4,
        4.6666701039432823E-4,
        4.6313837828337867E-4, 4.5964756612670854E-4, 4.561938891693984E-4, 4.5277667873722116E-4,
        4.4939528176879406E-4,
        4.460490603650502E-4, 4.4273739135158863E-4, 4.3945966585789975E-4, 4.3621528891035766E-4,
        4.330036790382019E-4,
        4.298242678932862E-4, 4.266764998832606E-4, 4.235598318151901E-4, 4.204737325523844E-4, 4.174176826817755E-4,
        4.1439117419284077E-4,
        4.113937488630093E-4, 4.0842516859596056E-4, 4.054846663604783E-4, 4.025717768073589E-4, 3.996860445294459E-4,
        3.96827023797397E-4,
        3.9399427830344447E-4, 3.911873809130384E-4, 3.884059134255935E-4, 3.856494663401211E-4, 3.829176386311861E-4,
        3.802100375290829E-4,
        3.7752627830789365E-4, 3.7486598408043026E-4, 3.722287855988382E-4, 3.696143210606406E-4, 3.670222359219988E-4,
        3.644521827150804E-4, 3.6190382087197825E-4, 3.5937681655318077E-4, 3.5687084248170464E-4,
        3.543855777807803E-4,
        3.5192070781830953E-4, 3.4947592405387695E-4, 3.4705092389109016E-4, 3.4464543510692724E-4,
        3.4225936439480353E-4,
        3.3989220061880765E-4, 3.375436635980611E-4, 3.352134784170291E-4, 3.329013753018417E-4, 3.306070894991686E-4,
        3.2833036115920144E-4, 3.2607093522096786E-4, 3.238285613013092E-4, 3.21602993587744E-4, 3.193939907321086E-4,
        3.172013157495268E-4,
        3.150247359186009E-4, 3.128640226843782E-4, 3.107189515649811E-4, 3.085893020590147E-4, 3.06474857557526E-4,
        3.0437540525618534E-4,
        3.0229073607124235E-4, 3.002206445577027E-4, 2.981649288281707E-4, 2.961233904755778E-4, 2.9409583455419774E-4,
        2.920820692751125E-4, 2.900819207252159E-4, 2.880953472065295E-4, 2.8612200628030937E-4, 2.841617189135448E-4,
        2.822143090602802E-4,
        2.802796035975552E-4, 2.783574322643423E-4, 2.7644762760081765E-4, 2.745500248889643E-4, 2.726644620967278E-4,
        2.7079077982072874E-4, 2.68928821232417E-4, 2.6707843202455894E-4, 2.652394603591679E-4, 2.6341175681754425E-4,
        2.615951743503153E-4, 2.597895682288076E-4, 2.579947959990836E-4, 2.562107174346462E-4, 2.54437194492807E-4,
        2.526740912698333E-4,
        2.509212739592037E-4, 2.491786108087535E-4, 2.474459720805955E-4, 2.457232300112633E-4, 2.4401028235010447E-4,
        2.4230729311269794E-4, 2.4061382493678618E-4, 2.389297575895455E-4, 2.372549726259443E-4,
        2.3558935335499243E-4,
        2.3393278480499102E-4, 2.322851536908921E-4, 2.3064634838199094E-4, 2.2901625887006283E-4,
        2.2739477673860975E-4,
        2.2578179513255137E-4, 2.2417720872869307E-4, 2.225809137069712E-4, 2.2099280772192031E-4,
        2.1941278987513968E-4,
        2.178407606882038E-4, 2.1627662207646114E-4, 2.1472027732272192E-4, 2.1317163105216697E-4,
        2.1163058920770084E-4,
        2.1009705902541587E-4, 2.0857094901094442E-4, 2.0705216891625522E-4, 2.055406297168938E-4,
        2.0403624359000005E-4,
        2.0253892389188177E-4, 2.010485851371424E-4, 1.9956514297780892E-4, 1.980885141827926E-4, 1.966186166176831E-4,
        1.9515536922520837E-4, 1.9369869200602796E-4, 1.922485060003032E-4, 1.9080473326837932E-4,
        1.8936729687357712E-4,
        1.8793612086387412E-4, 1.8651113025491828E-4, 1.850922510130415E-4, 1.8367941003805122E-4,
        1.8227253514802033E-4,
        1.808715550618567E-4, 1.7947639938475923E-4, 1.780869985920086E-4, 1.7670328401486746E-4,
        1.7532518782492623E-4,
        1.7395264301967028E-4, 1.725855834087131E-4, 1.7122394359958548E-4, 1.6986765898419076E-4,
        1.6851665451067532E-4,
        1.6717065879356952E-4, 1.6582983183377475E-4, 1.6449411203722786E-4, 1.6316343852906812E-4,
        1.6183775114209098E-4,
        1.6051699040475764E-4, 1.592010975289826E-4, 1.5789001439897588E-4, 1.565836835599188E-4,
        1.5528204820686176E-4,
        1.5398505217345537E-4, 1.5269263992190307E-4, 1.5140475653191432E-4, 1.5012134769054608E-4,
        1.488423596821553E-4,
        1.4756773937846246E-4, 1.4629743422861496E-4, 1.4503139224969486E-4, 1.437695620174484E-4,
        1.4251189265662711E-4,
        1.412583338322171E-4, 1.400088357404461E-4, 1.3876334910001287E-4, 1.3752182514320532E-4, 1.362842156077959E-4,
        1.3505047272854842E-4, 1.338205492288358E-4, 1.3259439831292408E-4, 1.3137197365781228E-4,
        1.301532294054608E-4,
        1.28938120155353E-4, 1.27726600956668E-4, 1.2651862730100882E-4, 1.25314155115408E-4, 1.2411314075450042E-4,
        1.2291554099425062E-4,
        1.2172131302445877E-4, 1.2053041444215484E-4, 1.1934280324510382E-4, 1.1815843782470026E-4,
        1.1697727695997306E-4,
        1.157992798109242E-4, 1.146244059124224E-4, 1.1345261516776395E-4, 1.1228386784284394E-4, 1.111181245600501E-4,
        1.0995534629232306E-4, 1.0879549435743874E-4, 1.0763853041212412E-4, 1.0648441947008758E-4,
        1.0533321588418465E-4,
        1.0418478530543895E-4, 1.0303909068926087E-4, 1.0189609530264487E-4, 1.0075576271917352E-4,
        9.961805681379943E-5,
        9.84829417577382E-5, 9.735038201352797E-5, 9.62203423300334E-5, 9.50927877376162E-5, 9.396768354352769E-5,
        9.284499532674628E-5,
        9.172468893381414E-5, 9.060673047395218E-5, 8.94910863145637E-5, 8.83777230769045E-5, 8.726660763158645E-5,
        8.615770709413662E-5,
        8.505098882083395E-5, 8.394642040454592E-5, 8.284396967034313E-5, 8.174360467161357E-5, 8.064529368584372E-5,
        7.95490052106218E-5,
        7.845470795980747E-5, 7.736237085931297E-5, 7.627196304366146E-5, 7.518345385176817E-5, 7.409681282349867E-5,
        7.301200969575539E-5,
        7.192901439884158E-5, 7.084779705288091E-5, 6.976832796415366E-5, 6.869057762154407E-5, 6.761451669318186E-5,
        6.654011602277854E-5,
        6.546734662626896E-5, 6.439617968853617E-5, 6.332658655988643E-5, 6.225853875285736E-5, 6.119200793885948E-5,
        6.01269659450121E-5,
        5.906338475086814E-5, 5.800123648525002E-5, 5.6940493423141E-5, 5.5881127982576606E-5, 5.482311272148044E-5,
        5.3766420334694365E-5,
        5.2711023650980904E-5, 5.1656895629942357E-5, 5.0604009359078717E-5, 4.955233805098436E-5,
        4.8501855040239406E-5,
        4.745253378066194E-5, 4.640434784236591E-5, 4.5357270909013314E-5, 4.4311276774983144E-5,
        4.3266339342540316E-5,
        4.222243261914338E-5, 4.117953071455793E-5, 4.0137607838358624E-5, 3.9096638297098085E-5, 3.805659649158688E-5,
        3.701745691436775E-5, 3.597919414700945E-5, 3.494178285745608E-5, 3.390519779744583E-5, 3.286941379999908E-5,
        3.1834405776740016E-5,
        3.0800148715440234E-5, 2.9766617677395857E-5, 2.873378779499891E-5, 2.770163426916994E-5,
        2.6670132366873878E-5,
        2.5639257418649808E-5, 2.46089848162101E-5, 2.3579290009873022E-5, 2.255014850617576E-5, 2.1521535865501318E-5,
        2.0493427699566635E-5, 1.9465799669077244E-5, 1.843862748131253E-5, 1.7411886887745698E-5,
        1.6385553681663723E-5,
        1.5359603695794255E-5, 1.4334012799925577E-5, 1.330875689860983E-5, 1.228381192874134E-5,
        1.1259153857287596E-5,
        1.023475867889534E-5, 9.21060241360766E-6, 8.186661104508247E-6, 7.162910815414203E-6, 6.139327628579272E-6,
        5.115887642355432E-6,
        4.092566968901326E-6, 3.0693417318698735E-6, 2.0461880641123656E-6 };

    /** Reference geometric elevation corrections generated by BIBOR at an infinite distance. */
    private static final double[] refGeometricInfinite =
    { 0.008278874318005336, 0.0078015255149552765, 0.007365694759068786, 0.0069671771329480325, 0.006601826934401034,
        0.0062661666416907735, 0.0059573521284612685, 0.005672007136646062, 0.005403107785388883, 0.00515060540377732,
        0.004916287718286005, 0.004698978608139948, 0.004498243109625433, 0.004311346285900575, 0.004137175740490884,
        0.003974442015208801, 0.003822258649300414, 0.0036797941594919337, 0.003546210925833959, 0.003421663306197864,
        0.0033044330462144167, 0.003194041540505843, 0.003089968892436179, 0.0029916497392805663,
        0.0028982236840944253,
        0.002810276318424565, 0.002726867155999013, 0.0026478699345817702, 0.0025727453538124667,
        0.0025014111110870374,
        0.002433595850664272, 0.002369307133214704, 0.002308043364257495, 0.0022495072126627047, 0.002193593320208631,
        0.002140151922353839, 0.0020892050870180423, 0.0020405166311712186, 0.0019938095874787454,
        0.0019490164732380855,
        0.00190602866946743, 0.0018647311017279122, 0.0018252666551814567, 0.0017872397551355057,
        0.0017506496223702595,
        0.0017153836275907164, 0.00168140492141311, 0.001648737933344968, 0.0016172410755403988, 0.0015868629033934933,
        0.0015574686980088792, 0.0015290317701277534, 0.0015015659978254714, 0.0014750605854443322,
        0.0014493688724712683,
        0.0014245041394753688, 0.0014004077932034953, 0.001377057217037736, 0.0013544467301733754,
        0.0013325158778008106,
        0.0013112272833213368, 0.0012905478843823204, 0.0012704412308346402, 0.0012509748495235229,
        0.0012320288870015794,
        0.0012136012098717952, 0.0011956437526063901, 0.0011781608283156775, 0.0011612053762835028,
        0.0011446834293260544,
        0.0011285763616175615, 0.0011128717191963844, 0.0010975383831866026, 0.001082623876430766,
        0.0010680834284069185,
        0.001053892255451716, 0.0010400163307489052, 0.0010264702650160107, 0.0010132574401409133,
        0.001000353908852114,
        9.877411600356378E-4, 9.75407946055773E-4, 9.633460906239844E-4, 9.51548615868214E-4, 9.400378572557155E-4,
        9.287511456008701E-4, 9.17701912392932E-4, 9.06873957617016E-4, 8.963004945106157E-4, 8.859452828045011E-4,
        8.757949290068012E-4, 8.658366801521655E-4, 8.560760252183108E-4, 8.465088172906476E-4, 8.371475164612452E-4,
        8.279632694165873E-4, 8.189436836509856E-4, 8.100886268584961E-4, 8.014089845911343E-4, 7.927926890156645E-4,
        7.844407663912811E-4, 7.762401038793332E-4, 7.681864972253205E-4, 7.602758940912224E-4, 7.525043873597426E-4,
        7.44868208782723E-4, 7.373637229513008E-4, 7.299874215767055E-4, 7.227359180543846E-4, 7.156059423039096E-4,
        7.085943358631219E-4, 7.016980472247525E-4, 6.949141274017467E-4, 6.882397257086392E-4, 6.816720857449887E-4,
        6.752085415728803E-4, 6.688465140767264E-4, 6.62583507493153E-4, 6.564171061065327E-4, 6.503449710961728E-4,
        6.443648375311639E-4, 6.384745115020074E-4, 6.326718673854703E-4, 6.26954845230232E-4, 6.213219140827064E-4,
        6.157727917786016E-4, 6.10303435479187E-4, 6.049120250373186E-4, 5.995967945360281E-4, 5.943560302990036E-4,
        5.891880689881113E-4, 5.840912957810751E-4, 5.79064142627761E-4, 5.74105086580623E-4, 5.692126481948723E-4,
        5.64385389995703E-4,
        5.596219150107995E-4, 5.549208653607973E-4, 5.50280920909918E-4, 5.45700797971227E-4, 5.411792480634059E-4,
        5.367150567181511E-4, 5.323070423366438E-4, 5.27954055088875E-4, 5.236549758591558E-4, 5.194087152313731E-4,
        5.152142125144366E-4, 5.110704348054718E-4, 5.069763760900958E-4, 5.029311909725553E-4, 4.989345801063028E-4,
        4.949848084181419E-4, 4.91080969361013E-4, 4.8722217925534217E-4, 4.834075765742796E-4, 4.7963632125624933E-4,
        4.759075940408142E-4, 4.7222059583207354E-4, 4.685745470820457E-4, 4.649686871978087E-4, 4.614022739701795E-4,
        4.5787458302215533E-4, 4.5438490727800485E-4, 4.50932556449013E-4, 4.475168565396537E-4, 4.441371493697499E-4,
        4.407927921135091E-4, 4.3748315685465666E-4, 4.3420763015655783E-4, 4.3096561264688305E-4,
        4.2775651861748365E-4,
        4.245797756361469E-4, 4.2143482417300593E-4, 4.183211172381629E-4, 4.152381595091681E-4, 4.121856779311095E-4,
        4.091628668975167E-4, 4.061692262641303E-4, 4.0320426678841503E-4, 4.002675098326858E-4, 3.973584870776703E-4,
        3.9447674024539747E-4, 3.916218208305233E-4, 3.887932898402058E-4, 3.8599071754275016E-4,
        3.8321368322302707E-4,
        3.8046177494688305E-4, 3.777345893322126E-4, 3.750317313264695E-4, 3.7235281399239373E-4,
        3.6969745829917855E-4,
        3.67065292920854E-4, 3.6445595403955533E-4, 3.6186908515656313E-4, 3.5930433690711805E-4, 3.56761366882008E-4,
        3.542398394542623E-4, 3.517394256101758E-4, 3.4925980278677216E-4, 3.468006760583009E-4, 3.443619056432423E-4,
        3.4194299270828843E-4, 3.395436389871387E-4, 3.3716355191493186E-4, 3.3480244449091145E-4,
        3.324600351458651E-4,
        3.3013604761267246E-4, 3.278302108005171E-4, 3.255422586729839E-4, 3.2327193012937627E-4,
        3.2101896888925285E-4,
        3.1878312338029513E-4, 3.1656414662939447E-4, 3.143617961562928E-4, 3.121758338704428E-4, 3.100060259707549E-4,
        3.0785214284800855E-4, 3.057139589897062E-4, 3.035912528874807E-4, 3.014838069473891E-4, 2.9939140740220527E-4,
        2.9731384422582163E-4, 2.9525091105087053E-4, 2.9320240508734496E-4, 2.911681416647438E-4,
        2.891480688534953E-4,
        2.8714183317013475E-4, 2.8514924539235764E-4, 2.831701195007419E-4, 2.812042726104691E-4,
        2.7925152490360095E-4,
        2.7731169956368706E-4, 2.753846227112611E-4, 2.7347012334255627E-4, 2.715680332675552E-4, 2.696781870519249E-4,
        2.678004219579533E-4, 2.659345778893707E-4, 2.6408049733583905E-4, 2.622380253191059E-4, 2.6040700934137906E-4,
        2.5858729933359026E-4, 2.567787476061012E-4, 2.549812087999648E-4, 2.5319453983951856E-4,
        2.5141859988586646E-4,
        2.496532502921367E-4, 2.478983545589619E-4, 2.461537782918466E-4, 2.4441940130393025E-4, 2.4269524105080542E-4,
        2.409810068623175E-4, 2.3927657237221567E-4, 2.375818131180596E-4, 2.3589660650380484E-4,
        2.3422083176305453E-4,
        2.3255436992342116E-4, 2.308971037721097E-4, 2.2924891782116763E-4, 2.2760969827451127E-4,
        2.2597933299561834E-4,
        2.2435771147533146E-4, 2.2274472480110497E-4, 2.2114026562625178E-4, 2.195442281403004E-4,
        2.1795650804012912E-4,
        2.1637700250154435E-4, 2.148056101510809E-4, 2.1324223103924567E-4, 2.116867666134281E-4,
        2.1013911969247623E-4,
        2.0859919444071728E-4, 2.0706689634331088E-4, 2.0554213218171302E-4, 2.0402481001002837E-4,
        2.0251483913125146E-4,
        2.010121300748402E-4, 1.9951659457417836E-4, 1.980281455443711E-4, 1.9654669706137273E-4,
        1.9507216434055952E-4,
        1.9360446371619044E-4, 1.9214351262153428E-4, 1.9068922956866352E-4, 1.892415341298026E-4,
        1.8780034691778802E-4,
        1.8636558956786065E-4, 1.8493718471945808E-4, 1.8351505599822904E-4, 1.8209912799882488E-4,
        1.8068932626802425E-4,
        1.7928557728719152E-4, 1.778878084568447E-4, 1.764959480798911E-4, 1.7510992534608416E-4,
        1.7372967031659137E-4,
        1.7235511390878422E-4, 1.7098618788147224E-4, 1.6962282482024804E-4, 1.6826495812316544E-4,
        1.6691252198686168E-4,
        1.6556545139279066E-4, 1.6422368209367821E-4, 1.628871506000884E-4, 1.6155579416810006E-4,
        1.602295507858731E-4,
        1.58908359161547E-4, 1.5759215871097298E-4, 1.5628088954550146E-4, 1.5497449246049122E-4, 1.536729089233746E-4,
        1.523760810626107E-4, 1.5108395165630562E-4, 1.4979646412144332E-4, 1.485135625030054E-4, 1.47235191463313E-4,
        1.459612962720902E-4, 1.4469182279569504E-4, 1.4342671748762692E-4, 1.4216592737847922E-4,
        1.4090940006622477E-4,
        1.3965708370694552E-4, 1.3840892700539564E-4, 1.371648792058977E-4, 1.3592489008334985E-4,
        1.3468890993439953E-4,
        1.3345688956878377E-4, 1.3222878030083596E-4, 1.3100453394093714E-4, 1.297841027875779E-4,
        1.2856743961903172E-4,
        1.2735449768547236E-4, 1.261452307011468E-4, 1.2493959283660372E-4, 1.2373753871142146E-4,
        1.2253902338626999E-4,
        1.2134400235619403E-4, 1.2015243154278599E-4, 1.1896426728769116E-4, 1.1777946634522474E-4,
        1.1659798587571046E-4,
        1.1541978343881931E-4, 1.1424481698663058E-4, 1.1307304485747016E-4, 1.119044257693047E-4,
        1.1073891881330233E-4,
        1.0957648344789295E-4, 1.0841707949243995E-4, 1.0726066712130056E-4, 1.0610720721243583E-4,
        1.0495667145693499E-4,
        1.0380900962719819E-4, 1.0266418325993731E-4, 1.0152215421782573E-4, 1.0038288468439127E-4,
        9.924633715818754E-5,
        9.81124744477424E-5, 9.698125966628446E-5, 9.58526562263029E-5, 9.47266278348291E-5, 9.360313848805202E-5,
        9.248215246648872E-5,
        9.136363433021044E-5, 9.024754891379105E-5, 8.913386132175516E-5, 8.80225369236931E-5, 8.69135413498201E-5,
        8.580684048631326E-5, 8.470240047081523E-5, 8.360018768804878E-5, 8.250016876537591E-5, 8.140231056841252E-5,
        8.030658019703152E-5, 7.9212944980811E-5, 7.812137247503737E-5, 7.703183045670858E-5, 7.59442869203153E-5,
        7.485871007389955E-5,
        7.377506833508574E-5, 7.26933303272781E-5, 7.161346487563613E-5, 7.053544100346643E-5, 6.94592279282813E-5,
        6.838479505821837E-5, 6.731211198826581E-5, 6.624114849670959E-5, 6.517187454152529E-5, 6.410426025676985E-5,
        6.303827594916767E-5, 6.19738920946411E-5, 6.091107933475781E-5, 5.984980847345556E-5, 5.879005047365604E-5,
        5.773177645396199E-5, 5.667495768529873E-5, 5.561956558769454E-5, 5.4565571727172024E-5, 5.351294781236193E-5,
        5.246166569153332E-5, 5.141169734929063E-5, 5.03630149036316E-5, 4.931559060283863E-5, 4.826939682237019E-5,
        4.722440606191869E-5, 4.618059094244065E-5, 4.5137924203159097E-5, 4.409637869859373E-5, 4.305592739578534E-5,
        4.201654337124272E-5, 4.097819980822259E-5, 3.994086999384305E-5, 3.8904527316280246E-5, 3.786914526190954E-5,
        3.6834697412641004E-5, 3.580115744311607E-5, 3.476849911791813E-5, 3.373669628897735E-5, 3.2705722892795164E-5,
        3.167555294779356E-5, 3.0646160551636714E-5, 2.9617519878635812E-5, 2.8589605177056776E-5,
        2.7562390766566747E-5,
        2.6535851035597302E-5, 2.5509960438818702E-5, 2.448469349447535E-5, 2.3460024781929434E-5,
        2.2435928939107397E-5,
        2.141238065987705E-5, 2.038935469166059E-5, 1.9366825832825563E-5, 1.8344768930242394E-5,
        1.7323158876779432E-5,
        1.6301970608853522E-5, 1.5281179103904252E-5, 1.4260759378000032E-5, 1.324068648335397E-5,
        1.2220935505867503E-5,
        1.1201481562736482E-5, 1.0182299799973982E-5, 9.163365390023326E-6, 8.14465352932947E-6, 7.126139435899986E-6,
        6.1077983469284836E-6, 5.08960551637988E-6, 4.071536212582605E-6, 3.0535657158294732E-6, 2.0356693159881076E-6 };

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @testType UT
     * 
     * @testedFeature {@link features#ASTRONOMICAL_REFRACTION_MODEL}
     * 
     * @testedMethod {@link AstronomicalRefractionModel#AstronomicalRefractionModel(EllipsoidPoint, MeteorologicalConditionsProvider, double)}
     * @testedMethod {@link AstronomicalRefractionModel#AstronomicalRefractionModel(EllipsoidPoint, MeteorologicalConditionsProvider, double, double, int)}
     * @testedMethod {@link AstronomicalRefractionModel#getMaxIter()}
     * @testedMethod {@link AstronomicalRefractionModel#getThreshold()}
     * @testedMethod {@link AstronomicalRefractionModel#getMinimalToleratedApparentElevation()}
     * @testedMethod {@link AstronomicalRefractionModel#getPoint()}
     * @testedMethod {@link AstronomicalRefractionModel#getMeteoConditionsProvider()}
     * @testedMethod {@link AstronomicalRefractionModel#getWavelengthNanometer()}
     * @testedMethod {@link AstronomicalRefractionModel#getParameters()}
     * 
     * @description tests for the Astronomical Refraction Model constructors
     * 
     * @testPassCriteria the constructors behave as expected
     */
    @Test
    public void testConstructors() throws PatriusException {

        // Environment initialization
        final OneAxisEllipsoid earth = new OneAxisEllipsoid(Constants.GRS80_EARTH_EQUATORIAL_RADIUS,
            Constants.GRS80_EARTH_FLATTENING, FramesFactory.getITRF(), "Earth");
        final EllipsoidPoint kirunaPoint = new EllipsoidPoint(earth, earth.getLLHCoordinatesSystem(),
            MathLib.toRadians(67.8805741), MathLib.toRadians(21.0310484), 521.18, "");
        final double cTok = 273.15; // celsius to kelvin constant
        final MeteorologicalConditions meteo = new MeteorologicalConditions(101000., 0. + cTok, 60);
        final MeteorologicalConditionsProvider meteoConditionsProvider = new ConstantMeteorologicalConditionsProvider(
            meteo);

        final double wavelengthNanometer = 550.;

        // Test the 1st constructor
        AstronomicalRefractionModel model = new AstronomicalRefractionModel(kirunaPoint, meteoConditionsProvider,
            wavelengthNanometer);
        Assert.assertEquals(AstronomicalRefractionModel.DEFAULT_THRESHOLD, model.getThreshold(), 1e-12);
        Assert.assertEquals(AstronomicalRefractionModel.DEFAULT_MAX_ITER, model.getMaxIter());
        Assert.assertEquals(meteoConditionsProvider, model.getMeteoConditionsProvider());
        Assert.assertEquals(-0.0872664625997166, model.getMinimalToleratedApparentElevation(), 1e-12);
        Assert.assertEquals(wavelengthNanometer, model.getWavelengthNanometer(), 1e-12);
        Assert.assertEquals(0, model.getParameters().size()); // Parameters aren't supported
        Assert.assertEquals(kirunaPoint, model.getPoint());

        // Test the 2nd constructor
        final double threshold = 0.1;
        final int maxIter = 2;
        model = new AstronomicalRefractionModel(kirunaPoint, meteoConditionsProvider, wavelengthNanometer, threshold,
            maxIter);
        Assert.assertEquals(threshold, model.getThreshold(), 1e-12);
        Assert.assertEquals(maxIter, model.getMaxIter());
        Assert.assertEquals(meteoConditionsProvider, model.getMeteoConditionsProvider());
        Assert.assertEquals(-0.0872664625997166, model.getMinimalToleratedApparentElevation(), 1e-12);
        Assert.assertEquals(wavelengthNanometer, model.getWavelengthNanometer(), 1e-12);
        Assert.assertEquals(0, model.getParameters().size()); // Parameters aren't supported
        Assert.assertEquals(kirunaPoint, model.getPoint());
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @testType UT
     * 
     * @testedFeature {@link features#ASTRONOMICAL_REFRACTION_MODEL}
     * 
     * @testedMethod {@link AstronomicalRefractionModel#AstronomicalRefractionModel(EllipsoidPoint, MeteorologicalConditionsProvider, double)}
     * @testedMethod {@link AstronomicalRefractionModel#AstronomicalRefractionModel(EllipsoidPoint, MeteorologicalConditionsProvider, double, double, int)}
     * 
     * @description tests for the Astronomical Refraction Model constructors with invalid or null arguments
     * 
     * @testPassCriteria the constructors behave as expected
     */
    @Test
    public void testInvalidConstructor() throws PatriusException {
        // Environment initialization
        final OneAxisEllipsoid earth = new OneAxisEllipsoid(Constants.GRS80_EARTH_EQUATORIAL_RADIUS,
            Constants.GRS80_EARTH_FLATTENING, FramesFactory.getITRF(), "Earth");
        final EllipsoidPoint kirunaPoint = new EllipsoidPoint(earth, earth.getLLHCoordinatesSystem(),
            MathLib.toRadians(67.8805741), MathLib.toRadians(21.0310484), 521.18, "");
        final double cTok = 273.15; // celsius to kelvin constant
        final MeteorologicalConditions meteo = new MeteorologicalConditions(101000., 0. + cTok, 60);
        final MeteorologicalConditionsProvider meteoConditionsProvider = new ConstantMeteorologicalConditionsProvider(
            meteo);

        final double invalidWavelengthNanometer = 0.2;

        // Invalid wavelength
        try {
            new AstronomicalRefractionModel(kirunaPoint, meteoConditionsProvider, invalidWavelengthNanometer);
            Assert.fail(); // Expected as the wavelength is outside the accepted range
        } catch (final IllegalArgumentException e) {
            Assert.assertEquals("The provided wavelength (0.2nm) is outside the tolerance [300, 800]nm",
                e.getLocalizedMessage());
        }

        try {
            new AstronomicalRefractionModel(kirunaPoint, meteoConditionsProvider, invalidWavelengthNanometer,
                AstronomicalRefractionModel.DEFAULT_THRESHOLD, AstronomicalRefractionModel.DEFAULT_MAX_ITER);
            Assert.fail(); // Expected as the wavelength is outside the accepted range
        } catch (final IllegalArgumentException e) {
            Assert.assertEquals("The provided wavelength (0.2nm) is outside the tolerance [300, 800]nm",
                e.getLocalizedMessage());
        }
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @testType UT
     * 
     * @testedFeature {@link features#ASTRONOMICAL_REFRACTION_MODEL}
     * 
     * @testedMethod {@link AstronomicalRefractionModel#supportsParameter(Parameter)}
     * @testedMethod {@link AstronomicalRefractionModel#isDifferentiableBy(Parameter)}
     * @testedMethod {@link AstronomicalRefractionModel#derivativeValueFromApparentElevation(Parameter, double)}
     * @testedMethod {@link AstronomicalRefractionModel#derivativeValueFromGeometricElevation(Parameter, double)}
     * 
     * @description tests for the Astronomical Refraction Model methods relative to parameters (for coverage purposes,
     *              since they are not supported as of now).
     * 
     * @testPassCriteria the parameters are not supported.
     */
    @Test
    public void testParameters() throws PatriusException {
        // Environment initialization
        final OneAxisEllipsoid earth = new OneAxisEllipsoid(Constants.GRS80_EARTH_EQUATORIAL_RADIUS,
            Constants.GRS80_EARTH_FLATTENING, FramesFactory.getITRF(), "Earth");
        final EllipsoidPoint kirunaPoint = new EllipsoidPoint(earth, earth.getLLHCoordinatesSystem(),
            MathLib.toRadians(67.8805741), MathLib.toRadians(21.0310484), 521.18, "");
        final double cTok = 273.15; // celsius to kelvin constant
        final MeteorologicalConditions meteo = new MeteorologicalConditions(101000., 0. + cTok, 60);
        final MeteorologicalConditionsProvider meteoConditionsProvider = new ConstantMeteorologicalConditionsProvider(
            meteo);

        final double wavelengthNanometer = 550.;

        final Parameter dummyParam = new Parameter("dummy", 1.);
        final double dummyElevation = MathLib.toRadians(5.);

        final AstronomicalRefractionModel model =
            new AstronomicalRefractionModel(kirunaPoint, meteoConditionsProvider, wavelengthNanometer);
        Assert.assertFalse(model.supportsParameter(dummyParam));
        Assert.assertFalse(model.isDifferentiableBy(dummyParam));
        Assert.assertEquals(0., model.derivativeValueFromApparentElevation(dummyParam, dummyElevation), 1e-12);
        Assert.assertEquals(0., model.derivativeValueFromGeometricElevation(dummyParam, dummyElevation), 1e-12);
    }

    /**
     * @testType UT
     * 
     * @testedFeature {@link features#ASTRONOMICAL_REFRACTION_MODEL}
     * 
     * @testedMethod {@link AstronomicalRefractionModel#computeGroundRefractivity(double, double, double)}
     * 
     * @description tests for the Astronomical Refraction Model Ground refraction computation (for coverage purposes)
     * 
     * @testPassCriteria there is no numerical regression on the computed value
     */
    @Test
    public void testComputeGroundRefractivity() {
        final double elevation = MathLib.toRadians(5.);
        final double pressure = 101000.;
        final double temperature = 273.15;
        Assert.assertEquals(2.936961222420e-4,
            AstronomicalRefractionModel.computeGroundRefractivity(elevation, pressure, temperature),
            1e-12);
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @testType UT
     * 
     * @testedFeature {@link features#ASTRONOMICAL_REFRACTION_MODEL}
     * 
     * @testedMethod {@link AstronomicalRefractionModel#computeElevationCorrectionFromApparentElevation(AbsoluteDate, double)}
     * 
     * @description tests for the Astronomical Refraction Model elevation correction computation when extrapolation is
     *              needed (for coverage purposes)
     * 
     * @testPassCriteria there is no numerical regression on the computed value
     */
    @Test
    public void testTableExtrapolation() throws PatriusException {
        // Environment initialization
        final OneAxisEllipsoid earth = new OneAxisEllipsoid(Constants.GRS80_EARTH_EQUATORIAL_RADIUS,
            Constants.GRS80_EARTH_FLATTENING, FramesFactory.getITRF(), "Earth");
        final EllipsoidPoint kirunaPoint = new EllipsoidPoint(earth, earth.getLLHCoordinatesSystem(),
            MathLib.toRadians(67.8805741), MathLib.toRadians(21.0310484), 521.18, "");
        final double cTok = 273.15; // celsius to kelvin constant
        final MeteorologicalConditions meteo = new MeteorologicalConditions(101000., 0. + cTok, 60);
        final ConstantMeteorologicalConditionsProvider meteoConditionsProvider = new ConstantMeteorologicalConditionsProvider(
            meteo);

        final double wavelengthNanometer = 550.;

        final AstronomicalRefractionModel model =
            new AstronomicalRefractionModel(kirunaPoint, meteoConditionsProvider, wavelengthNanometer);

        try {
            Assert.assertEquals(0.010882525908,
                model.computeElevationCorrectionFromApparentElevation(AbsoluteDate.J2000_EPOCH, 0.), 1e-12);
            Assert
                .assertEquals(
                    0.107014650339,
                    model.computeElevationCorrectionFromApparentElevation(AbsoluteDate.J2000_EPOCH,
                        MathLib.toRadians(-3.)), 1e-12);
            Assert
                .assertEquals(
                    0.194060600064,
                    model.computeElevationCorrectionFromApparentElevation(AbsoluteDate.J2000_EPOCH,
                        MathLib.toRadians(-5.)), 1e-12);

            // Should fail, as no zenithal distance above 95.0deg is authorized
            Assert.assertEquals(
                0.194060600064,
                model.computeElevationCorrectionFromApparentElevation(AbsoluteDate.J2000_EPOCH,
                    MathLib.toRadians(-5.000001)), 1e-12);
            Assert.fail();

        } catch (final IllegalArgumentException e) {
            Assert
                .assertEquals(
                    "The apparent zenithal distance (95.000001deg) is greater than the maximum zenithal distance allowed (95.000000deg)",
                    e.getLocalizedMessage());
        }
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @description Use the {@link AstronomicalRefractionModel refraction model} to compute the elevation corrections
     *              and compare them to reference values generated by BIBOR.
     *              <p>
     *              Context:
     *              <ul>
     *              <li>447 elevations, from 0.2° to 89.6°</li>
     *              <li>1 antenna, 1 date</li>
     *              <li>The refraction is computed on the apparent elevation</li>
     *              <li>The target is at a finite distance of 800km</li>
     *              </ul>
     *              </p>
     *
     * @passCriteria For each value, the difference between the computed value and the reference value should be below
     *               the validity threshold.
     */
    @Test
    public void testRefractionBiborApparentFinite() throws PatriusException {

        // Run the computation and extract the errors summary
        final List<Pair<Double, Double>> errors = run(true, true, refApparentFinite, validityThreshold, false);

        // The errors summary should be empty
        if (errors.size() > 0) {
            Assert.fail();
        }
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @description Use the {@link AstronomicalRefractionModel refraction model} to compute the elevation corrections
     *              and compare them to reference values generated by BIBOR.
     *              <p>
     *              Context:
     *              <ul>
     *              <li>447 elevations, from 0.2° to 89.6°</li>
     *              <li>1 antenna, 1 date</li>
     *              <li>The refraction is computed on the apparent elevation</li>
     *              <li>The target is at an infinite distance</li>
     *              </ul>
     *              </p>
     *
     * @passCriteria For each value, the difference between the computed value and the reference value should be below
     *               the validity threshold.
     */
    @Test
    public void testRefractionBiborApparentInfinite() throws PatriusException {

        // Run the computation and extract the errors summary
        final List<Pair<Double, Double>> errors = run(true, false, refApparentInfinite, validityThreshold, false);

        // The errors summary should be empty
        if (errors.size() > 0) {
            Assert.fail();
        }
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @description Use the {@link AstronomicalRefractionModel refraction model} to compute the elevation corrections
     *              and compare them to reference values generated by BIBOR.
     *              <p>
     *              Context:
     *              <ul>
     *              <li>447 elevations, from 0.2° to 89.6°</li>
     *              <li>1 antenna, 1 date</li>
     *              <li>The refraction is computed on the geometric elevation</li>
     *              <li>The target is at a finite distance of 800km</li>
     *              </ul>
     *              </p>
     *
     * @passCriteria For each value, the difference between the computed value and the reference value should be below
     *               the validity threshold.
     */
    @Test
    public void testRefractionBiborGeometricFinite() throws PatriusException {

        // Run the computation and extract the errors summary
        final List<Pair<Double, Double>> errors = run(false, true, refGeometricFinite, validityThreshold, false);

        // The errors summary should be empty
        if (errors.size() > 0) {
            Assert.fail();
        }
    }

    /**
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     * @description Use the {@link AstronomicalRefractionModel refraction model} to compute the elevation corrections
     *              and compare them to reference values generated by BIBOR.
     *              <p>
     *              Context:
     *              <ul>
     *              <li>447 elevations, from 0.2° to 89.6°</li>
     *              <li>1 antenna, 1 date</li>
     *              <li>The refraction is computed on the geometric elevation</li>
     *              <li>The target is at an infinite distance</li>
     *              </ul>
     *              </p>
     *
     * @passCriteria For each value, the difference between the computed value and the reference value should be below
     *               the validity threshold.
     */
    @Test
    public void testRefractionBiborGeometricInfinite() throws PatriusException {

        // Run the computation and extract the errors summary
        final List<Pair<Double, Double>> errors = run(false, false, refGeometricInfinite, validityThreshold, false);

        // The errors summary should be empty
        if (errors.size() > 0) {
            Assert.fail();
        }
    }

    /**
     * Main computation process.
     * <p>
     * Use the refraction model to compute the elevation corrections and compare them to reference values generated by
     * BIBOR.
     * </p>
     *
     * @param isApparentElev
     *        Indicate if we want to compute apparent elevation --> geometric elevation ({@code true}), or the opposite
     *        otherwise
     * @param isFiniteDistance
     *        Indicate if we want to consider a finite 800km distance between the antenna point and the satellite (
     *        {@code true}), or an infinite distance otherwise
     * @param ref
     *        Array containing the reference values, as computed with BIBOR
     * @param validityThreshold
     *        Validity threshold used to evaluate the absolute difference of each reference value against computed ones
     *        (results)
     * @param verbose
     *        Log console messages if {@code true}
     * @return the list of errors (test should fail if not empty)
     * @throws PatriusException
     *         if the precession-nutation model data embedded in the library cannot be read
     */
    public static List<Pair<Double, Double>> run(final boolean isApparentElev, final boolean isFiniteDistance,
                                                 final double[] ref,
                                                 final double validityThreshold, final boolean verbose)
        throws PatriusException {

        StringTablePrinter printer = null;
        if (verbose) { // Initialize the printer
            printer = new StringTablePrinter("Results", new String[] { "ref", "res", "ref-res" });
        }

        // Parameters
        final AbsoluteDate date = AbsoluteDate.J2000_EPOCH;
        final double temperature = 273.15; // [K]
        final double pressure = 101000.; // [Pa]
        final double rh = 60.; // [0,100]
        final double wlNanometer = 550.; // [nm]

        final MeteorologicalConditions meteo = new MeteorologicalConditions(pressure, temperature, rh);

        // KRX Antenna
        final OneAxisEllipsoid earth = new OneAxisEllipsoid(Constants.GRS80_EARTH_EQUATORIAL_RADIUS,
            Constants.GRS80_EARTH_FLATTENING, FramesFactory.getITRF(), "Earth");
        final EllipsoidPoint point = new EllipsoidPoint(earth, earth.getLLHCoordinatesSystem(),
            MathLib.toRadians(67.8805741), MathLib.toRadians(21.0310484), 521.18, "");

        // Min and max elevation values considered in the test [deg]
        final double minElev = 0.2;
        final double maxElev = 89.6;

        // Step for the geometric elevation table [deg]. Should be chosen so that (maxElev - minElev / step) is an
        // integer
        final double step = 0.2;

        // Epsilon to take into account the double errors in java (89.8 + 7e-13 instead of 89.8 for instance)
        final double epsilon = 1e-12;

        final double tolerance = 1e-10;
        final int maxIter = 3000;

        // Distance between antenna and satellite
        final double distance;
        if (isFiniteDistance) {
            distance = 800000.;
        } else {
            distance = Double.POSITIVE_INFINITY;
        }

        // Initialize the refraction model
        final AstronomicalRefractionModel refractionModel =
            new AstronomicalRefractionModel(point, new ConstantMeteorologicalConditionsProvider(meteo), wlNanometer,
                tolerance, maxIter);

        final List<Pair<Double, Double>> errors = new ArrayList<>();

        // Loop on each elevation
        int index = 0;
        for (double elev = minElev; elev <= maxElev + epsilon; elev += step) {

            // Extract the elevation correction (reference)
            final double elevationCorrectionRef = ref[index];

            // Compute the elevation correction (result)
            final double elevationCorrection;
            if (isApparentElev) {
                elevationCorrection =
                    refractionModel.computeElevationCorrectionFromApparentElevation(date, MathLib.toRadians(elev),
                        distance);
            } else {
                elevationCorrection =
                    refractionModel.computeElevationCorrectionFromGeometricElevation(date, MathLib.toRadians(elev),
                        distance);
            }

            // Compute the absolute difference: reference - result
            final double diff = elevationCorrectionRef - elevationCorrection;

            if (verbose) { // Fill the printer
                printer.addLine(new double[] { elevationCorrectionRef, elevationCorrection, diff }, "%g");
            }

            // Check if the difference is below the validity threshold or not (error)
            if (MathLib.abs(diff) > validityThreshold) {
                errors.add(new Pair<>(elev, diff));
            }
            index++;
        }

        if (verbose) { // Print the table
            printer.addBoldLineSeparator();
            System.out.println(printer);
        }

        return errors;
    }
}

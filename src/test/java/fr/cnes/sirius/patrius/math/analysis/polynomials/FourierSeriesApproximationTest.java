/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 *
 *
 * Copyright 2011-2022 CNES
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * @history Created 23/05/2012
 *
 * HISTORY
 * VERSION:4.10:DM:DM-3185:03/11/2022:[PATRIUS] Decoupage de Patrius en vue de la mise a disposition dans GitHub
 * VERSION:4.9:FA:FA-3128:10/05/2022:[PATRIUS] Historique des modifications et CopyrightsÂ 
 * VERSION:4.3:DM:DM-2097:15/05/2019:[PATRIUS et COLOSUS] Mise en conformite du code avec le nouveau standard de codage DYNVOL
 * VERSION::FA:400:17/03/2015: use class FastMath instead of class Math
 * VERSION::DM:1782:19/11/2018:generalisation of low-level math framework
 * END-HISTORY
 */
package fr.cnes.sirius.patrius.math.analysis.polynomials;

import static fr.cnes.sirius.patrius.math.analysis.polynomials.FourierSeriesTest.areFourierSeriesEqual;
import static org.junit.Assert.assertEquals;

import org.junit.Assert;
import org.junit.Test;

import fr.cnes.sirius.patrius.math.analysis.UnivariateFunction;
import fr.cnes.sirius.patrius.math.analysis.integration.IterativeLegendreGaussIntegrator;
import fr.cnes.sirius.patrius.math.util.FastMath;
import fr.cnes.sirius.patrius.math.util.MathLib;

/**
 * Test the {@link FourierSeriesApproximation} class
 * 
 * @see FourierDecompositionEngine
 * 
 * @author Rami Houdroge
 * 
 * @version $Id: FourierSeriesApproximationTest.java 17909 2017-09-11 11:57:36Z bignon $
 * 
 * @since 1.2
 * 
 */
public class FourierSeriesApproximationTest {

    /** Features description. */
    public enum features {

        /**
         * @featureTitle {@link FourierSeriesApproximation} Constructor
         * 
         * @featureDescription Test of a FourierSeriesApproximation
         * 
         * @coveredRequirements DV-CALCUL_30, DV-CALCUL_40
         */
        FOURIERSERIES_APPROXIMATION
    }

    /**
     * Omega
     */
    final double w = 1.0;
    /**
     * Constant
     */
    final double c = 2.0816681711721685E-17;
    /**
     * Cos array
     */
    final double[] a = new double[] { 1.0000000000000002, 1.6653345369377348E-16, -1.1102230246251566E-17,
        2.0816681711721685E-16, -2.180795226942272E-16, 3.080331641942547E-5, -3.0803316419327625E-5,
        1.3877787807814457E-16, -3.515706244646329E-16, 7.382983113757291E-16, };
    /**
     * Sin array
     */
    final double[] b = new double[] { -1.0408340855860843E-17, -1.734723475976807E-18, -4.336808689942018E-17,
        -2.42861286636753E-17, -1.0408340855860843E-17, 3.469446951953614E-18, -3.469446951953614E-18, 0.0,
        6.938893903907228E-18, 2.0816681711721685E-17, };
    /**
     * Fourier Series
     */
    final FourierSeries fff = new FourierSeries(this.w, this.c, this.a, this.b);

    /**
     * @testType UT
     * 
     * @testedFeature {@link features#FOURIERSERIES_APPROXIMATION}
     * 
     * @testedMethod {@link FourierSeriesApproximation#getFourier()}
     * @testedMethod {@link FourierSeriesApproximation#getFunction()}
     * @testedMethod {@link FourierSeriesApproximation#getPeriod()}
     * 
     * @description Test the {@link FourierSeriesApproximation} class methods. The object itself is generated by THE
     *              {@link FourierDecompositionEngine}
     * 
     * @input integrator and univariate function
     * 
     * @output {@link FourierSeriesApproximation}
     * 
     * @testPassCriteria The approximation is consistent with the function to 1e-3. See
     *                   {@link FourierDecompositionEngineTest}. The obtained {@link FourierSeries} is the same as
     *                   the expected one to 1e-14.
     * 
     * @referenceVersion 1.2
     * 
     * @nonRegressionVersion 1.2
     */
    @Test
    public void mainTest() {

        // create a decomposition engine
        final IterativeLegendreGaussIntegrator integrator = new IterativeLegendreGaussIntegrator(5, 1e-3, 1e-3);
        final FourierDecompositionEngine engine = new FourierDecompositionEngine(integrator);

        // create the test function
        final UnivariateFunction function = new UnivariateFunction(){
            /** Serializable UID. */
            private static final long serialVersionUID = -262035900482169979L;

            @Override
            public double value(final double x) {
                return MathLib.cos(x);
            }
        };

        // set period and decompose
        final double period = 2 * FastMath.PI;
        engine.setFunction(function, period);
        engine.setOrder(10);
        final FourierSeriesApproximation result = engine.decompose();

        // validation of computation
        checkData(result, 1e-3);
        // non regression
        areFourierSeriesEqual(this.fff, result.getFourier());

        // check other minor methods
        Assert.assertEquals(period, result.getPeriod(), FourierSeriesTest.EPS);
        Assert.assertEquals(result.toString(), result.getFourier().toString());
    }

    /**
     * Check that the decomposition returned the right result
     * 
     * @param result
     *        {@link FourierSeriesApproximation} generated by the {@link FourierDecompositionEngine}
     * @param d
     *        doubles comparison tolerance
     */
    private static void checkData(final FourierSeriesApproximation result, final double d) {

        // 100 points to check within a period
        final int numPoints = 100;
        double currentX = -result.getPeriod() / 2;
        final double rate = result.getPeriod() / numPoints;

        for (int i = 0; i < numPoints; i++) {
            assertEquals(result.getFunction().value(currentX), result.getFourier().value(currentX), d);
            currentX += rate;
        }
    }
}
